import re

from models.extratos import Extratos
from utils import filtrar_digitos

from .waha import WahaBot

waha = WahaBot()
extrato = Extratos()

class BotClass:

    def __init__(self):
        self.__conversation_state = {}

    @property
    def get_conversation_state(self):
        return self.__conversation_state
       
        
    def define_status(self, chatId, status=None):
        """
        Define ou recupera o estado da conversa de um determinado usu√°rio (chatId).

        Par√¢metros:
            chatId (str): Identificador √∫nico do usu√°rio.
            status (str, opcional): Novo estado a ser definido.

        Retorna:
            str: Estado atual da conversa.
        """
        if status:
            # Define o novo estado da conversa
            self.__conversation_state[chatId] = status
            state = self.__conversation_state[chatId]
        elif chatId in self.__conversation_state:
            # Recupera o estado atual se j√° existir
            state = self.__conversation_state[chatId]
        else:
             # Se o estado n√£o existir, define como 'start'
            state = 'start'

        return state


    def define_proxima_mensagem(self, state, chatId, message_content):
        """
        Define a pr√≥xima mensagem do bot com base no estado atual da conversa do usu√°rio.

        Par√¢metros:
            state (str): Estado atual da conversa.
            chatId (str): Identificador do usu√°rio no chat.
            message_content (str): Mensagem recebida do usu√°rio.
        """

        if state == 'start':
            # Primeira intera√ß√£o do usu√°rio
            message = '''Ol√°, bem vindo ao Economy Bot!\nVoc√™ ainda n√£o possui uma conta!\n\nDeseja cadastrar-se no nosso sistema de controle financeiro?\n\n\t 1- Sim\n\t 2- N√£o'''
            self.define_status(chatId, 'first_answer')
        elif state == 'first_answer':
            # Trata resposta da pergunta de cadastro
            respostas_sim = {"1", "sim", "Sim", "SIM", "s", "S"}
            respostas_nao = {"2", "nao", "Nao", "NAO", "n√£o", "N√£o", "N√ÉO", "n", "N"}
            if message_content.strip() in respostas_sim:
                # Usu√°rio aceitou o cadastro
                message = '''√ìtimo! Iremos prosseguir com seu cadastro! Por favor, preencha este formul√°rio:\n https://whatsform.com/uucley'''
                self.define_status(chatId, 'cadastro')
            elif message_content.strip() in respostas_nao:
                # Usu√°rio recusou o cadastro
                message = 'Certo! Encerraremos nosso atendimento por aqui! Caso mude de ideia, √© s√≥ chamar'
                self.define_status(chatId, 'start')
            else:
                # Resposta inv√°lida
                message = 'Resposta inv√°lida! Por favor, escolha Sim ou N√£o.'
        else:
            return
        
        # Envia mensagem para o usu√°rio via WhatsApp

        waha.send_message(chatId, message)
        

    def captura_dados_mensagem(self, chatId, mensagem):
        """
        Captura e valida os dados da mensagem de entrada enviada pelo usu√°rio.

        Par√¢metros:
            chatId (str): Identificador do usu√°rio.
            mensagem (str): Texto da mensagem enviada.

        A√ß√£o:
            Valida e armazena os dados na tabela de extratos e entradas.
        """

        dados = self.parse_entrada_data(mensagem)
        numero_telefone = filtrar_digitos(chatId)

        if type(dados) == str:
            # Dados inv√°lidos, retorna mensagem de erro ao usu√°rio
            waha.send_message(chatId, dados)
            raise Exception("Erro ao capturar dados da mensagem do usu√°rio")

        try:
            # Extrai m√™s e ano da data
            _, mes, ano = dados['data'].split("/")

            # Verifica se o extrato existe para o m√™s/ano. Se n√£o existir, cria.
            if extrato.verifica_extrato_existe(numero_telefone, mes, ano):
                # Cadastra a entrada enviada pelo usu√°rio
                if extrato.cadastra_entrada(dados, mes, ano, chatId):
                    waha.send_message(chatId, mensagem)
            else:
                extrato.cria_extrato_usuario(numero_telefone, mes, ano)
                if extrato.cadastra_entrada(dados, mes, ano, chatId):
                    waha.send_message(chatId, mensagem)


        except Exception as e:
            print('Erro')
            print(e)

 
    def parse_entrada_data(self, entrada):
        """
        Faz o parsing da mensagem de entrada do usu√°rio para extrair os campos estruturados.

        Par√¢metros:
            entrada (str): Mensagem recebida contendo os dados da transa√ß√£o.

        Retorna:
            dict: Dados extra√≠dos e validados, ou mensagem de erro como string.
        """
        try:
            # Express√£o regular para extrair os campos da mensagem
            padrao = re.compile(
                r"üí≤ Produto: (.+)\n"
                r"üîñ Descri√ß√£o: (.+)\n"
                r"üí∞ Valor: R\$ ([\d,.]+)\n"
                r"üîÑ Tipo: (?:üü©|üü•) (Receita|Despesa)\n" 
                r"üìÇ Categoria: (.+)\n"
                r"üí≥ Pagamento: (.+)\n"
                r"üóìÔ∏è Data: (\d{2}/\d{2}/\d{4})"
            )

            match = padrao.search(entrada)
            if not match:
                raise Exception("Formato da mensagem inv√°lido. Verifique os campos e tente novamente.")

            if not match.group(3) or not match.group(4):
                raise ValueError("Ocorreu um erro ao cadastrar seu registro!\nCertifique-se de informar o valor e o tipo de registro (RECEITA OU DESPESA) antes de nos enviar.")

            # Cria dicion√°rio com os dados extra√≠dos e j√° padronizados
            dados = {
                "produto" : match.group(1).upper(),
                "descricao": match.group(2).upper(),
                "valor": match.group(3).replace('.', '').replace(',', '.'),
                "tipo": match.group(4).upper(),
                "categoria": match.group(5).upper(),
                "pagamento": match.group(6).upper(),
                "data": match.group(7),
            }

            self.valida_dados(dados)
            return dados

        except ValueError as ve:
            print("Erro de valida√ß√£o:", ve)
            return str(ve)

        except Exception as e:
            print('Falha ao capturar informa√ß√µes da entrada do usu√°rio')
            print(e)
        
    def valida_dados(self, dados):
        """
        Valida os dados extra√≠dos da mensagem do usu√°rio.

        Par√¢metros:
            dados (dict): Dicion√°rio com os dados da transa√ß√£o.

        Retorna:
            bool: True se todos os dados forem v√°lidos.

        Exce√ß√µes:
            Lan√ßa erro se algum campo exceder os limites definidos.
        """
        if len(dados.get('produto')) > 100:
            raise Exception("O campo 'produto' excede o limite de 100 caracteres.")
        elif len(dados.get('categoria')) > 150:
            raise Exception("O campo 'categoria' excede o limite de 150 caracteres.")
        elif len(str(dados.get('valor'))) > 12:
            raise ValueError("Este valor √© muito alto para cadastrar no nosso sistema!\n Nosso sistema √© feito apenas para controle financeiro. Para transa√ß√µes desse nivel, aconselhamos procurar um profissional capacitado!")

        return True 